const { PrismaClient } = require('@prisma/client');
const logger = require('../config/logger');

const prisma = new PrismaClient();

async function scanDatabase() {
  try {
    console.log('\n=== üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Solar ===\n');

    // –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await prisma.users.findMany({
      select: {
        id: true,
        email: true,
        username: true,
        role: true,
        status: true,
        created_at: true,
      },
      orderBy: {
        created_at: 'desc',
      },
    });

    console.log('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
    console.log('----------------------------------------');
    users.forEach((user) => {
      console.log(`ID: ${user.id}`);
      console.log(`Email: ${user.email}`);
      console.log(`–ò–º—è: ${user.username}`);
      console.log(`–†–æ–ª—å: ${user.role}`);
      console.log(`–°—Ç–∞—Ç—É—Å: ${user.status}`);
      console.log(`–°–æ–∑–¥–∞–Ω: ${user.created_at}`);
      console.log('----------------------------------------');
    });
    console.log(`–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);

    // –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–ª–∏–µ–Ω—Ç–æ–≤
    const clients = await prisma.clients.findMany({
      select: {
        id: true,
        name: true,
        email: true,
        phone: true,
        role: true,
        is_active: true,
        code: true,
        vat_code: true,
        created_at: true,
      },
      orderBy: {
        created_at: 'desc',
      },
    });

    console.log('\nüè¢ –ö–ª–∏–µ–Ω—Ç—ã:');
    console.log('----------------------------------------');
    clients.forEach((client) => {
      console.log(`ID: ${client.id}`);
      console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${client.name}`);
      console.log(`Email: ${client.email}`);
      console.log(`–¢–µ–ª–µ—Ñ–æ–Ω: ${client.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`–†–æ–ª—å: ${client.role}`);
      console.log(`–°—Ç–∞—Ç—É—Å: ${client.is_active ? '–ê–∫—Ç–∏–≤–Ω—ã–π' : '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'}`);
      console.log(`–ö–æ–¥: ${client.code || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`VAT: ${client.vat_code || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`–°–æ–∑–¥–∞–Ω: ${client.created_at}`);
      console.log('----------------------------------------');
    });
    console.log(`–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${clients.length}`);

    // –ü—Ä–æ–¥–∞–∂–∏ –∏ –ø–æ–∫—É–ø–∫–∏
    const salesCount = await prisma.sales.count();
    const purchasesCount = await prisma.purchases.count();

    console.log('\nüí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
    console.log(`–ü—Ä–æ–¥–∞–∂–∏: ${salesCount}`);
    console.log(`–ü–æ–∫—É–ø–∫–∏: ${purchasesCount}`);

    // –°–∫–ª–∞–¥—ã
    const warehousesCount = await prisma.warehouses.count();
    const warehousesByStatus = await prisma.warehouses.groupBy({
      by: ['status'],
      _count: true,
    });

    console.log('\nüè≠ –°–∫–ª–∞–¥—ã:');
    console.log(`–í—Å–µ–≥–æ: ${warehousesCount}`);
    warehousesByStatus.forEach((status) => {
      console.log(`${status.status}: ${status._count}`);
    });

    // –ü—Ä–æ–¥—É–∫—Ç—ã
    const productsCount = await prisma.products.count();
    const activeProducts = await prisma.products.count({
      where: { is_active: true },
    });

    console.log('\nüì¶ –ü—Ä–æ–¥—É–∫—Ç—ã:');
    console.log(`–í—Å–µ–≥–æ: ${productsCount}`);
    console.log(`–ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeProducts}`);

    // –ü–ª–∞–Ω —Å—á–µ—Ç–æ–≤
    const accountsCount = await prisma.chart_of_accounts.count();
    console.log('\nüìä –ü–ª–∞–Ω —Å—á–µ—Ç–æ–≤:');
    console.log(`–í—Å–µ–≥–æ —Å—á–µ—Ç–æ–≤: ${accountsCount}`);
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ
if (require.main === module) {
  scanDatabase();
}

module.exports = scanDatabase;
