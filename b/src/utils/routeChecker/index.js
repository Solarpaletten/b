const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');
const dotenv = require('dotenv');

dotenv.config();

const frontendDir = path.resolve(__dirname, '../../../f/src');
const backendDir = path.resolve(__dirname, '../../');
const backendUrl = process.env.FRONTEND_URL?.replace('3000', '4000') || 'http://localhost:4000';
const token = process.env.JWT_TOKEN;

// –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ñ–∞–π–ª–æ–≤
const expectedStructure = {
    frontend: {
        pages: {
            'BankOperations/BankOperations.tsx': '/bank-operations',
            'ChartOfAccounts/ChartOfAccounts.tsx': '/chart-of-accounts',
            'Clients/Clients.tsx': '/clients',
            'Dashboard/Dashboard.tsx': '/dashboard',
            'DocSettlements/DocSettlements.tsx': '/doc-settlements',
            'Products/Products.tsx': '/products',
            'Purchases/Purchases.tsx': '/purchases',
            'Sales/Sales.tsx': '/sales',
            'Warehouses/Warehouses.tsx': '/warehouses'
        },
        components: [
            'ErrorBoundary.tsx',
            'ProtectedRoute.tsx',
            'auth/LoginForm.tsx',
            'auth/RegisterForm.tsx',
            'common/LanguageSwitcher.tsx',
            'common/LoadingSpinner.tsx',
            'layout/Header.tsx',
            'layout/Layout.tsx',
            'layout/Sidebar.tsx',
            'ui/alert.tsx'
        ]
    },
    backend: {
        controllers: [
            'authController.js',
            'bankOperationsController.js',
            'chartOfAccountsController.js',
            'clientsController.js',
            'productsController.js',
            'purchasesController.js',
            'salesController.js',
            'warehouseController.js'
        ],
        routes: [
            'authRoutes.js',
            'bankOperationsRoutes.js',
            'chartOfAccountsRoutes.js',
            'clientsRoutes.js',
            'docSettlementRoutes.js',
            'productsRoutes.js',
            'purchasesRoutes.js',
            'salesRoutes.js',
            'statsRoutes.js',
            'userRoutes.js',
            'warehousesRoutes.js'
        ]
    }
};

async function –ø—Ä–æ–≤–µ—Ä–∏—Ç—å–°—Ç—Ä—É–∫—Ç—É—Ä—É() {
    console.log('\nüîë –ü—Ä–æ–≤–µ—Ä—è—é —Ç–æ–∫–µ–Ω...');
    if (!token) {
        console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env! –î–æ–±–∞–≤—å—Ç–µ JWT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω');
        return;
    }
    console.log('‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω:', token.slice(0, 20) + '...');

    console.log('\nüìÇ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞...\n');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend
    console.log('üñ• FRONTEND:');
    console.log('----------------');

    for (const [pageFile, route] of Object.entries(expectedStructure.frontend.pages)) {
        const filePath = path.join(frontendDir, 'pages', pageFile);
        const exists = fs.existsSync(filePath);
        
        console.log(`\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${route}:`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        if (exists) {
            console.log('   ‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞ –º–µ—Å—Ç–µ');
        } else {
            console.log('   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç:');
            console.log('      –°–æ–∑–¥–∞–π: src/pages/' + pageFile);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ API
        try {
            const apiPath = `/api${route}`;
            const response = await fetch(`${backendUrl}${apiPath}`, {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                console.log('   ‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç');
            } else {
                const text = await response.text();
                console.log(`   ‚ùå API –æ—à–∏–±–∫–∞ ${response.status}:`);
                console.log(`      ${apiPath} ‚Üí ${text}`);
            }
        } catch (error) {
            console.log('   ‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    console.log('\nüß© –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:');
    for (const comp of expectedStructure.frontend.components) {
        const exists = fs.existsSync(path.join(frontendDir, 'components', comp));
        console.log(`   ${exists ? '‚úÖ' : '‚ùå'} ${comp}`);
        if (!exists) {
            console.log(`      –°–æ–∑–¥–∞–π: src/components/${comp}`);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ backend
    console.log('\n‚öôÔ∏è BACKEND:');
    console.log('----------------');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
    console.log('\nüéÆ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã:');
    for (const controller of expectedStructure.backend.controllers) {
        const exists = fs.existsSync(path.join(backendDir, 'controllers', controller));
        console.log(`   ${exists ? '‚úÖ' : '‚ùå'} ${controller}`);
        if (!exists) {
            console.log(`      –°–æ–∑–¥–∞–π: controllers/${controller}`);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
    console.log('\nüõ£ –ú–∞—Ä—à—Ä—É—Ç—ã:');
    for (const route of expectedStructure.backend.routes) {
        const exists = fs.existsSync(path.join(backendDir, 'routes', route));
        console.log(`   ${exists ? '‚úÖ' : '‚ùå'} ${route}`);
        if (!exists) {
            console.log(`      –°–æ–∑–¥–∞–π: routes/${route}`);
        }
    }

    console.log('\n‚ú® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

–ø—Ä–æ–≤–µ—Ä–∏—Ç—å–°—Ç—Ä—É–∫—Ç—É—Ä—É().catch(error => {
    console.log('\n‚ùå –û—à–∏–±–∫–∞:', error.message);
});