const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const { PrismaClient } = require('@prisma/client');
require('dotenv').config(); // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É .env —Ñ–∞–π–ª–∞

const prisma = new PrismaClient();

async function getToken() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JWT_SECRET
    if (!process.env.JWT_SECRET) {
      console.error('‚ùå –û—à–∏–±–∫–∞: JWT_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
      console.log('\nüí° –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª —Å—Ç—Ä–æ–∫—É:');
      console.log('JWT_SECRET=your-secret-key-here');
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.users.findUnique({
      where: {
        email: 'solar@solar.pl',
      },
    });

    if (!user) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å solar@solar.pl –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
    const token = jwt.sign(
      {
        id: user.id,
        email: user.email,
        role: user.role,
      },
      process.env.JWT_SECRET,
      { expiresIn: '24h' }
    );

    console.log('\n‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n');
    console.log('JWT_TOKEN=' + token);
    console.log('\nüí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤ –≤–∞—à .env —Ñ–∞–π–ª');
  } catch (error) {
    if (error.name === 'PrismaClientInitializationError') {
      console.error(
        '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DATABASE_URL –≤ .env —Ñ–∞–π–ª–µ'
      );
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
    }
  } finally {
    await prisma.$disconnect();
  }
}

getToken();
