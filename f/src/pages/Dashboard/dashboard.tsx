// –§–∞–π–ª: src/pages/Dashboard/dashboard.tsx
import { useQuery } from '@tanstack/react-query';
import { Alert, AlertDescription, AlertTitle } from '../../components/ui/alert';
import DashboardCard from './dashboardCard';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç API
interface DatabaseStats {
  connected: boolean;
  tables: {
    name: string;
    recordCount: number;
  }[];
  topClients: {
    name: string;
    volume: number;
  }[];
  topSuppliers: {
    name: string;
    volume: number;
  }[];
  totalStats: {
    clients: number;
    suppliers: number;
    buyers: number;
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –±—ç–∫–µ–Ω–¥–∞
const fetchDatabaseStats = async (): Promise<DatabaseStats> => {
  try {
    const response = await fetch('/api/stats/database-stats', {
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', data);
    return data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Dashboard
const Dashboard = () => {
  const { data, isLoading, error } = useQuery({
    queryKey: ['dbStats'],
    queryFn: fetchDatabaseStats,
    refetchInterval: 30000,
  });

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-full">
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
      </div>
    );
  }

  if (error) {
    return (
      <Alert variant="destructive">
        <AlertTitle>–û—à–∏–±–∫–∞</AlertTitle>
        <AlertDescription>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</AlertDescription>
      </Alert>
    );
  }

  if (!data || !data.tables) {
    return (
      <Alert variant="destructive">
        <AlertTitle>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</AlertTitle>
        <AlertDescription>–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</AlertDescription>
      </Alert>
    );
  }

  return (
    <div className="space-y-6">
      <Alert variant={data.connected ? "default" : "destructive"}>
        <AlertTitle>–°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</AlertTitle>
        <AlertDescription>
          {data.connected
            ? "–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
            : "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"}
        </AlertDescription>
      </Alert>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <DashboardCard title="–ö–ª–∏–µ–Ω—Ç—ã" value={data.totalStats.clients} icon="üë•" />
        <DashboardCard title="–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏" value={data.totalStats.suppliers} icon="üè≠" />
        <DashboardCard title="–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏" value={data.totalStats.buyers} icon="üõí" />
      </div>

      <div className="bg-white rounded-lg shadow">
        <div className="p-6">
          <h2 className="text-lg font-semibold text-gray-900 mb-4">–¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {data.tables.map((table) => (
              <div key={table.name} className="p-4 border border-gray-200 rounded-lg">
                <h3 className="text-sm font-medium text-gray-500">{table.name}</h3>
                <p className="text-lg font-semibold text-gray-900">
                  {table.recordCount.toLocaleString()} –∑–∞–ø–∏—Å–µ–π
                </p>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;
